Deploy Node.js WebServer on AWS EC2 and connect to MongoDB Atlas: 
1. Registrar a domain name for you Web Server. 

2.  Set up security group if not you don’t have one already.  (Ensure all ports are open for inbound traffic)

2. Launch EC2 basic instance:  
	- Go to AWS Instances.
	- Lunch Instance and follow default set up for Ubuntu 18.0.4 set up.

3. Allocate new Elastic IP address:  
	- Go to Elastic IP
	- Click allocate new Address the associate address with the new EC2 instance created in the previous step.

3. Set up two A - IPv4 address in AWS Route 53 with the value set to the Elastic IP set in the previous set

4. Now you should be able to SSH in.  
	- chmod 400 <YOUR-KEY-PAIR>.pem
	- ssh -i "<YOUR-KEY-PAIR>" ubuntu@ec2-34-194-130-21.compute-1.amazonaws.com
	- ssh -I ~/.ssh/<YOUR-KEY-PAIR>.pem ubuntu@34.192.16.19

5. Set up nignx:
	Ubuntu
	
	sudo wget http://nginx.org/keys/nginx_signing.key
	sudo apt-key add nginx_signing.key
	cd /etc/apt
	sudo nano sources.list

	
	At the bottom of that file, append it with:
	#
	deb http://nginx.org/packages/ubuntu bionic nginx
	deb-src http://nginx.org/packages/ubuntu bionic nginx
	#	

	Save the file then:
	sudo apt-get update
	sudo apt-get install nginx

 	Then start NGINX:
	sudo service nginx start

6.  Set Up Nginx config file:
	sudo nano /etc/nginx/conf.d/default.conf
	Next to “server_name”, replace “localhost” with your “domain.com” and the “www.domain.com” and Save the file

	cd /etc/nginx/conf.d
	sudo mv default.conf default.conf.bak
	sudo touch server.conf
	sudo nano server.conf	

	Add the following to the file and replace domain.com with your domain:

!!!NOTE: Add http server first then lets encrypt then https server

http server
#######
server {
	listen 80;
	listen [::]:80;
	server_name domain.com domain.com;
	return 301 https://$server_name$request_uri;
}

https server
#######
server {
	listen 443 ssl http2 default_server;
	listen [::]:443 ssl http2 default_server;
	server_name domain.com domain.com;
location / {
	proxy_pass http://localhost:3000;
}
ssl_certificate /etc/letsencrypt/live/domain.com/fullchain.pem;
ssl_certificate_key /etc/letsencrypt/live/domain.com/privkey.pem;
ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
ssl_prefer_server_ciphers on;
ssl_ciphers EECDH+CHACHA20:EECDH+AES128:RSA+AES128:EECDH+AES256:RSA+AES256:EECDH+3DES:RSA+3DES:!MD5;
ssl_session_cache shared:SSL:5m;
ssl_session_timeout 1h;
add_header Strict-Transport-Security “max-age=15768000” always;
}
#######

Note: if you get errors online try to type it in manually


7. Test and Reload nginx:
	sudo nginx -t
	sudo nginx -s reload

8. Set up Let’s Encrypt:
	sudo apt-get update
	sudo apt-get install software-properties-common
	sudo add-apt-repository ppa:certbot/certbot
	sudo apt-get update
	sudo apt-get install python-certbot-nginx
	sudo certbot — nginx -d domain.xom -d www.domain.com
	sudo certbot --nginx -d ironcowboymc.com -d www.ironcowboymc.com
	Then Follow septs until you get success message
	OR
	sudo snap install --classic certbot
	sudo certbot --nginx

	test renewal:
	sudo certbot renew --dry-run

9. Then git clone this repo I created for a simple Node and Express server:
	sudo git clone https://github.com/andrew428/mc-app

10. Get Node and npm and install:
	sudo apt update
	sudo apt install nodejs
	sudo apt install npm

	or 

	curl -fsSL https://deb.nodesource.com/setup_15.x | sudo -E bash -
	sudo apt-get install -y nodejs


11.  Start App
	node index.js

12. Add pm2
	npm install pm2 -g
	sudo pm2 kill and 
	sudo NODE_ENV=production pm2 start index.js


